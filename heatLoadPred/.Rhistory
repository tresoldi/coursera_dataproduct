qplot(CompressiveStrength,data=training)
plot(CompressiveStrength,data=training)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,col=training$Cement)
plot(training$CompressiveStrength,col=training$FlyAsh)
plot(training$CompressiveStrength,col=as.numeric(training$FlyAsh))
qplot(Superplasticizer,data=training)
rm(list=ls())
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
rm(list=ls())
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
install.packages("dplyr")
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
rm(list=ls())
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,1])
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays,classes)
?sapply
help
sapply(InsectSprays,class)
lm(count ~ spray,data=InsectSprays)
fit <- lm(count ~ spray,data=InsectSprays)
fit$coefficients
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, data=InsectSprays)
nfit$coefficients
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(count ~ spray, data=spray2)
fit2 <- lm(counts ~ spray, data=spray2)
spray2
fit2 <- lm(counts ~ spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fi2)$coef
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coe[3])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data=hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, data=x[hunger$Sex=="Female"])
lmF <- lm(Numeric ~ Year, data=hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric ~ Year, data=hunger[hunger$Sex=="Female",])
lmf <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex, data=hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data=hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit,which=1)
fitno <- (y~x,data=out2[-1,])
fitno <- lm(y~x,data=out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
dfbeta(fit)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma _1
sigma <- 1
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/ (sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- deviance(fitno)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
e
1
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rm(list=ls())
mtcars
factor(mtcars$cyl)
factor(mtcars$am)
cars <- mtcars
cars$cyl <- factor(cars$cyl)
cars$am <- factor(cars$am)
levels(cars$am) <- c('-auto', '-manual')
cars
fit <- lm(mpg ~ cyl + wt,cars)
summary(fit)
summary(fit)$coef
plot(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
plot(fit)
influence.measures(fit)$infmat[5, 'dfb.x']
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
vowel.train
?vowel.train
?vowel.test
str(vowel.test)
plot(vowel.train)
plot(x.1, y, vowel.train)
plot(x.1, y, data=vowel.train)
plot(x.1 ~ y, data=vowel.train)
rm(list=ls())
library(swirl)
swirl()
options(editor = "internal")
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ . -1, data=swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agricolture + Education + Catholic + Infant.Mortality)
mdl2 <- lm(Fertility ~ Agricolture + Education + Catholic + Infant.Mortality, swiss)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbiad()
x1c <- simbias()
apply(x1c,1,mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5,fit6)
ravenData
glm(ravenWinNum ~ ravenScore,"binomial",ravenData)
glm(ravenWinNum ~ ravenScore,"binomial",ravenData) >0 mdl
glm(ravenWinNum ~ ravenScore,"binomial",ravenData) -> mdl
predict(mdl,data.frame(ravenScore=c(0,3,6))) -> lodds
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[',date']))
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
mdl$fitted.values[704] -> lambda
qpois(.95,lambda = )
qpois(.95,lambda)
mdl <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mld2 <- glm(formula=simplystats ~ date, family=poisson, data=hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
summary(mdl2)
qpois(.95,mdl2$fitted.values[704])
rm(list=ls())
a <- 1+1
a
?read.csv
ufrgs <- read.csv('c:\\Dados\\rel2016\\janelas_cor.csv')
head(ufrgs)
ufrgs[,'registro.str']
ufrgs[,c('registro.str')]
ufrgs[,c('periodo.str')]
substr(ufrgs[,c('periodo.str')], 1, 4)
?as.integer
as.integer(substr(ufrgs[,c('periodo.str')], 1, 4))
as.integer(substr(ufrgs[,c('periodo.str')], 6, 6))
ufrgs$periodo.sem <- as.integer(substr(ufrgs[,c('periodo.str')], 6, 6))
source('C:/Dados/janelas.R', echo=TRUE)
head(ufrgs)
summary(ufrgs)
source('C:/Dados/janelas.R', echo=TRUE)
summary(ufrgs)
head(ufrgs)
rm(list=ls())
source('C:/Dados/janelas.R', echo=TRUE)
ufrgs <- read_data()
colnames(ufrgs)
head(ufrgs)
unique(ufrgs$curso.nome)
subset(ufrgs, curso.nome=='MEDICINA' && registro.sem_count==1 && periodo.sem==1)
subset(ufrgs, curso.nome=='MEDICINA' & registro.sem_count==1 & periodo.sem==1)
source('C:/Dados/janelas.R', echo=TRUE)
source('C:/Dados/janelas.R', echo=TRUE)
test_subset()
test_subset(ufrgs)
head(test_subset(ufrgs))
source('C:/Dados/janelas.R', echo=TRUE)
head(test_subset(ufrgs))
test_subset(ufrgs)
test <- test_subset(ufrgs)
head(test)
plot(test$periodo.ano, test$gpa.periodo)
abline(lm(test$gpa.periodo ~ test$periodo.ano), col="red")
unique(ufrgs$curso.nome)
source('C:/Dados/janelas.R', echo=TRUE)
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test)
myplot1(test_subset(ufrgs, "MEDICINA"))
myplot1(test_subset(ufrgs, "MATEMATICA"))
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MATEMATICA"), 'GPA MatemÃ¡tica')
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
?scatter.smooth
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
?geom_point
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
?geom_smooth
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
?geom_smooth
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "MEDICINA"), 'GPA Medicina')
source('C:/Dados/janelas.R', echo=TRUE)
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
?geom_smooth
source('C:/Dados/janelas.R', echo=TRUE)
?geom_smooth
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(test_subset(ufrgs, "LETRAS"), 'GPA Letras')
myplot1(ufrgs, "LETRAS")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS")
head(ufrgs)
ufrgs$cred.aprov_pp
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS")
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
myplot1(ufrgs, "LETRAS", gpa.periodo)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
myplot1(ufrgs, "LETRAS", "cred.aprov_pp")
head(ufrgs)
myplot1(ufrgs, "LETRAS", "tci.p")
myplot1(ufrgs, "LETRAS", "gpa.periodo")
?geom_smooth
myplot1(ufrgs, "LETRAS", "gpa.periodo")
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
source('C:/Dados/janelas.R', echo=TRUE)
myplot1(ufrgs, "LETRAS", "gpa.periodo")
myplot1(ufrgs, "LETRAS", "cred.aprov_pp")
myplot1(ufrgs, "LETRAS", "tci.p")
head(ufrgs)
myplot1(ufrgs, "LETRAS", "cred.total")
summary(ufrgs)
test <- subset(data, curso.nome==curso & registro.sem_count==1 & periodo.sem==1 & periodo.ano >= 1997 & periodo.ano < 2015)
test <- subset(ufrgs, curso.nome=="LETRAS" & registro.sem_count==1 & periodo.sem==1 & periodo.ano >= 1997 & periodo.ano < 2015)
prop.table(test$periodo.ano, test$cred.total)
prop.table(test[,c('periodo.ano', 'cred.total'])
prop.table(test[,c('periodo.ano', 'cred.total')])
head(prop.table(test[,c('periodo.ano', 'cred.total')]))
table(test$cred.total)
table(test$cred.total, test$periodo.ano)
prop.table(test$cred.total, test$periodo.ano)
prop.table(table(test$cred.total, test$periodo.ano))
prop.table(table(test$cred.total, test$periodo.ano), margin=1)
prop.table(table(test$cred.total, test$periodo.ano))
ufrgs$cred.total > 0
test$ativo <- test$cred.total > 0
table(test$cred.total, test$periodo.ano)
table(test$ativo, test$periodo.ano)
prop.table(table(test$ativo, test$periodo.ano))
prop.table(table(test$ativo, test$periodo.ano), margin=1)
prop.table(table(test$ativo, test$periodo.ano))
prop.table(table(test$ativo, test$periodo.ano, margin=1))
prop.table(table(test$ativo, test$periodo.ano))
table(test$ativo, test$periodo.ano)
?prop.tabÃ§e
?prop.table
prop.table(table(test$ativo, test$periodo.ano), margin=2)
qplot(prop.table(table(test$ativo, test$periodo.ano), margin=2))
qqplot(prop.table(table(test$ativo, test$periodo.ano), margin=2))
?prop.table
barplot(prop.table(table(test$ativo, test$periodo.ano), margin=2))
ggplot(datm,aes(x = variable, y = value,fill = ind)) +
geom_bar(position = "fill",stat = "identity") +
scale_y_continuous(labels = percent_format())
prop.table(table(test$ativo, test$periodo.ano), margin=2)
prop.table(table(test$ativo, test$periodo.ano), margin=2) -> myt
ggplot(myt, aes(x=variable, y=value, fill=ind)) + geom_bar(position="fill", stat="identity") + scale_y_continuous(labels=percent_format())
as.data.frame(myt)
ggplot(as.data.frame(myt), aes(x=Var2,y=Freq,fill=Var1))+geom_bar()
ggplot(as.data.frame(myt), aes(x=Var1,y=Freq,fill=Var2))+geom_bar()
ggplot(as.data.frame(myt), aes(x=Var2,y=Freq,fill=Var1))+geom_bar()
ggplot(as.data.frame(myt), aes(x=Var2,y=Var1))+geom_bar()
ggplot(as.data.frame(myt), aes(x=Var2,y=Var1,stat="identity"))+geom_bar()
ggplot(as.data.frame(myt), aes(x=Var2,y=Var1,stat="identity"))+geom_bar()
ggplot(as.data.frame(myt), aes(x=Var2,y=Var1))+geom_bar(stat="identity")
ggplot(as.data.frame(myt), aes(x=Var2,y=Freq))+geom_bar(stat="identity")
ggplot(as.data.frame(myt), aes(x=Var2,y=Freq,fill=Var1))+geom_bar(stat="identity")
?cars
?mtcars
install.packages("randomForest")
devtools::install_github('rstudio/rmarkdown')
?lapply
require(plyr)
?"plyr"
?subset
aq <- transform(airquality, Month = factor(Month, labels = month.abb[5:9]))
aq <- subset(aq, Month != "Jul")
table(aq$Month)
table(droplevels(aq)$Month)
aq <- droplevers(aq)
aq <- droplevels(aq)
table(aq$Month)
set.seed(1)
list1$success = rbinom(length(list1$time), 1, .5)
list1 <- list(time = 1:40)
list1$price = c(rnorm(40,.5*list1$time,4))
list1
list1$time
list1$success = rbinom(length(list1$time), 1, .5)
list1
glModel <- glm(success  ~ time, data = list1,
family=binomial(link="logit"))
glModel
plot(list1)
summary(glModel)
plot(list1$time, list1$price, main = "fake data")
abline(linearModel, col = "red")
linearModel <- lm(price  ~ time, data = list1)
abline(linearModel, col = "red")
plot(linearModel)
install.packages('shiny')
library(shiny)
runApp()
setwd("~/dataproduct")
setwd("~/dataproduct")
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?headerPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='tresoldi',
token='A1D351C934F5A364151B4F46DD05AD84',
secret='<SECRET>')
rsconnect::setAccountInfo(name='tresoldi',
token='A1D351C934F5A364151B4F46DD05AD84',
secret='0ujWIxGbFLR847YEmjdMJWBIsz+iHmxr1pzAAA3c')
library(rsconnect)
setwd("~/dataproduct")
rsconnect::deployApp('~/dataproduct/')
rsconnect::deployApp('C:\\Users\\00240181\\Documents\\dataproduct')
shiny::runApp()
rsconnect::deployApp('C:\\Users\\00240181\\Documents\\dataproduct')
install.packages('devtools')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author('heatLoadPred')
library(slidify)
author('heatLoadPred')
setwd("~/dataproduct/heatLoadPred")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish_github('tresoldi', 'coursera_dataproduct')
publish_github('coursera_dataproduct', 'tresoldi')
publish_github('coursera_dataproduct_presentation', 'tresoldi')
publish(title = 'AC Heat Load Prediction', 'index.html', host = 'rpubs')
publish_github('coursera_dataproduct_presentation', 'tresoldi')
publish_github('coursera_dataproduct_presentation', 'tresoldi')
publish_github('coursera_dataproduct_presentation', 'tresoldi')
publish_github('coursera_dataproduct_presentation', 'tresoldi')
